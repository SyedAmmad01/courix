/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/features/miscellaneous/dual-listbox.js":
/*!****************************************************************************!*\
  !*** ./resources/metronic/js/pages/features/miscellaneous/dual-listbox.js ***!
  \****************************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTDualListbox = function () {\n  // Private functions\n  var demo1 = function demo1() {\n    // Dual Listbox\n    var _this = document.getElementById('kt_dual_listbox_1');\n\n    // init dual listbox\n    var dualListBox = new DualListbox(_this, {\n      addEvent: function addEvent(value) {\n        console.log(value);\n      },\n      removeEvent: function removeEvent(value) {\n        console.log(value);\n      },\n      availableTitle: 'Available options',\n      selectedTitle: 'Selected options',\n      addButtonText: 'Add',\n      removeButtonText: 'Remove',\n      addAllButtonText: 'Add All',\n      removeAllButtonText: 'Remove All'\n    });\n  };\n  var demo2 = function demo2() {\n    // Dual Listbox\n    var _this = document.getElementById('kt_dual_listbox_2');\n\n    // init dual listbox\n    var dualListBox = new DualListbox(_this, {\n      addEvent: function addEvent(value) {\n        console.log(value);\n      },\n      removeEvent: function removeEvent(value) {\n        console.log(value);\n      },\n      availableTitle: \"Source Options\",\n      selectedTitle: \"Destination Options\",\n      addButtonText: \"<i class='flaticon2-next'></i>\",\n      removeButtonText: \"<i class='flaticon2-back'></i>\",\n      addAllButtonText: \"<i class='flaticon2-fast-next'></i>\",\n      removeAllButtonText: \"<i class='flaticon2-fast-back'></i>\"\n    });\n  };\n  var demo3 = function demo3() {\n    // Dual Listbox\n    var _this = document.getElementById('kt_dual_listbox_3');\n\n    // init dual listbox\n    var dualListBox = new DualListbox(_this, {\n      addEvent: function addEvent(value) {\n        console.log(value);\n      },\n      removeEvent: function removeEvent(value) {\n        console.log(value);\n      },\n      availableTitle: 'Available options',\n      selectedTitle: 'Selected options',\n      addButtonText: 'Add',\n      removeButtonText: 'Remove',\n      addAllButtonText: 'Add All',\n      removeAllButtonText: 'Remove All'\n    });\n  };\n  var demo4 = function demo4() {\n    // Dual Listbox\n    var _this = document.getElementById('kt_dual_listbox_4');\n\n    // init dual listbox\n    var dualListBox = new DualListbox(_this, {\n      addEvent: function addEvent(value) {\n        console.log(value);\n      },\n      removeEvent: function removeEvent(value) {\n        console.log(value);\n      },\n      availableTitle: 'Available options',\n      selectedTitle: 'Selected options',\n      addButtonText: 'Add',\n      removeButtonText: 'Remove',\n      addAllButtonText: 'Add All',\n      removeAllButtonText: 'Remove All'\n    });\n\n    // hide search\n    dualListBox.search.classList.add('dual-listbox__search--hidden');\n  };\n  return {\n    // public functions\n    init: function init() {\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n    }\n  };\n}();\nwindow.addEventListener('load', function () {\n  KTDualListbox.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/features/miscellaneous/dual-listbox.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/features/miscellaneous/dual-listbox.js"]();
/******/ 	
/******/ })()
;