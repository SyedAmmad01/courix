/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/features/cards/tools.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/pages/features/cards/tools.js ***!
  \*************************************************************/
/***/ (() => {

eval("\n\nvar KTCardTools = function () {\n  // Toastr\n  var initToastr = function initToastr() {\n    toastr.options.showDuration = 1000;\n  };\n\n  // Demo 1\n  var demo1 = function demo1() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_1');\n\n    // Toggle event handlers\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    });\n\n    // Remove event handlers\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    });\n\n    // Reload event handlers\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        overlayColor: '#ffffff',\n        type: 'loader',\n        state: 'primary',\n        opacity: 0.3,\n        size: 'lg'\n      });\n\n      // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  };\n\n  // Demo 2\n  var demo2 = function demo2() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_2');\n\n    // Toggle event handlers\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    });\n\n    // Remove event handlers\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    });\n\n    // Reload event handlers\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        overlayColor: '#000000',\n        type: 'spinner',\n        state: 'primary',\n        opacity: 0.05,\n        size: 'lg'\n      });\n\n      // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  };\n\n  // Demo 3\n  var demo3 = function demo3() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_3');\n\n    // Toggle event handlers\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    });\n\n    // Remove event handlers\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    });\n\n    // Reload event handlers\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        type: 'loader',\n        state: 'success',\n        message: 'Please wait...'\n      });\n\n      // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  };\n\n  // Demo 4\n  var demo4 = function demo4() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_4');\n\n    // Toggle event handlers\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    });\n\n    // Remove event handlers\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    });\n\n    // Reload event handlers\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        type: 'loader',\n        state: 'primary',\n        message: 'Please wait...'\n      });\n\n      // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  };\n  return {\n    //main function to initiate the module\n    init: function init() {\n      initToastr();\n\n      // init demos\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n    }\n  };\n}();\njQuery(document).ready(function () {\n  KTCardTools.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/features/cards/tools.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/features/cards/tools.js"]();
/******/ 	
/******/ })()
;