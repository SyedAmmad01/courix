/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/
(() => { // webpackBootstrap
    /******/
    "use strict";
    /******/
    var __webpack_modules__ = ({

        /***/
        "./resources/metronic/js/pages/widgets.js":
        /*!************************************************!*\
          !*** ./resources/metronic/js/pages/widgets.js ***!
          \************************************************/
        /***/
            ((module) => {

            eval("\n\n// Class definition\nvar KTWidgets = function () {\n  // Private properties\n\n  // General Controls\n  var _initDaterangepicker = function _initDaterangepicker() {\n    if ($('#kt_dashboard_daterangepicker').length == 0) {\n      return;\n    }\n    var picker = $('#kt_dashboard_daterangepicker');\n    var start = moment();\n    var end = moment();\n    function cb(start, end, label) {\n      var title = '';\n      var range = '';\n      if (end - start < 100 || label == 'Today') {\n        title = 'Today:';\n        range = start.format('MMM D');\n      } else if (label == 'Yesterday') {\n        title = 'Yesterday:';\n        range = start.format('MMM D');\n      } else {\n        range = start.format('MMM D') + ' - ' + end.format('MMM D');\n      }\n      $('#kt_dashboard_daterangepicker_date').html(range);\n      $('#kt_dashboard_daterangepicker_title').html(title);\n    }\n    picker.daterangepicker({\n      direction: KTUtil.isRTL(),\n      startDate: start,\n      endDate: end,\n      opens: 'left',\n      applyClass: 'btn-primary',\n      cancelClass: 'btn-light-primary',\n      ranges: {\n        'Today': [moment(), moment()],\n        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n        'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n        'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n        'This Month': [moment().startOf('month'), moment().endOf('month')],\n        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n      }\n    }, cb);\n    cb(start, end, '');\n  };\n\n  // Stats widgets\n  var _initStatsWidget7 = function _initStatsWidget7() {\n    var element = document.getElementById(\"kt_stats_widget_7_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['success']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initStatsWidget8 = function _initStatsWidget8() {\n    var element = document.getElementById(\"kt_stats_widget_8_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['danger']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['danger']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initStatsWidget9 = function _initStatsWidget9() {\n    var element = document.getElementById(\"kt_stats_widget_9_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['primary']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['primary']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['primary']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['primary']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initStatsWidget10 = function _initStatsWidget10() {\n    var element = document.getElementById(\"kt_stats_widget_10_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'info';\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initStatsWidget11 = function _initStatsWidget11() {\n    var element = document.getElementById(\"kt_stats_widget_11_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'success';\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initStatsWidget12 = function _initStatsWidget12() {\n    var element = document.getElementById(\"kt_stats_widget_12_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  // Charts widgets\n  var _initChartsWidget1 = function _initChartsWidget1() {\n    var element = document.getElementById(\"kt_charts_widget_1_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        type: 'bar',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['gray']['gray-300']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget2 = function _initChartsWidget2() {\n    var element = document.getElementById(\"kt_charts_widget_2_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        type: 'bar',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['warning'], KTApp.getSettings()['colors']['gray']['gray-300']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget3 = function _initChartsWidget3() {\n    var element = document.getElementById(\"kt_charts_widget_3_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 40, 40, 90, 90, 70, 70]\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['info']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['theme']['base']['info'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        //size: 5,\n        //colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: KTApp.getSettings()['colors']['theme']['base']['info'],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget4 = function _initChartsWidget4() {\n    var element = document.getElementById(\"kt_charts_widget_4_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [60, 50, 80, 40, 100, 60]\n      }, {\n        name: 'Revenue',\n        data: [70, 60, 110, 40, 50, 70]\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['theme']['light']['success'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['warning']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['warning']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['warning']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget5 = function _initChartsWidget5() {\n    var element = document.getElementById(\"kt_charts_widget_5_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        data: [-30, -40, -55, -60, -40, -20]\n      }],\n      chart: {\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['12%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: -80,\n        max: 80,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget6 = function _initChartsWidget6() {\n    var element = document.getElementById(\"kt_charts_widget_6_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        type: 'bar',\n        stacked: true,\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        type: 'bar',\n        stacked: true,\n        data: [20, 20, 25, 30, 30, 20]\n      }, {\n        name: 'Expenses',\n        type: 'area',\n        data: [50, 80, 60, 90, 50, 70]\n      }],\n      chart: {\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          stacked: true,\n          horizontal: false,\n          endingShape: 'rounded',\n          columnWidth: ['12%']\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        max: 120,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary'], KTApp.getSettings()['colors']['theme']['light']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget7 = function _initChartsWidget7() {\n    var element = document.getElementById(\"kt_charts_widget_7_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 300,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['warning'], 'transparent', 'transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['warning'], KTApp.getSettings()['colors']['theme']['light']['info'], KTApp.getSettings()['colors']['gray']['gray-100']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['warning'], KTApp.getSettings()['colors']['theme']['light']['info'], KTApp.getSettings()['colors']['gray']['gray-100']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['warning'], KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['gray']['gray-500']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget8 = function _initChartsWidget8() {\n    var element = document.getElementById(\"kt_charts_widget_8_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 300,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent', 'transparent', 'transparent']\n      },\n      xaxis: {\n        x: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0,\n          top: 0\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        y: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['danger'], KTApp.getSettings()['colors']['theme']['light']['info']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        padding: {\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['danger'], KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['danger'], KTApp.getSettings()['colors']['theme']['base']['info']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initChartsWidget9 = function _initChartsWidget9() {\n    var element = document.getElementById(\"kt_charts_widget_9_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 30, 45, 35, 25]\n      }, {\n        name: 'Revenue',\n        data: [-20, -30, -45, -35, -25]\n      }],\n      chart: {\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['17%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 0,\n        colors: ['transparent']\n      },\n      xaxis: {\n        lines: {\n          show: false\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        lines: {\n          show: false\n        },\n        min: -50,\n        max: 50,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  // Mixed widgets\n  var _initMixedWidget1 = function _initMixedWidget1() {\n    var element = document.getElementById(\"kt_mixed_widget_1_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var strokeColor = '#D13647';\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.5\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget2 = function _initMixedWidget2() {\n    var element = document.getElementById(\"kt_mixed_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var strokeColor = '#287ED7';\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.5\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget3 = function _initMixedWidget3() {\n    var element = document.getElementById(\"kt_mixed_widget_3_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var strokeColor = KTApp.getSettings()['colors']['theme']['base']['white'];\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.3\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['dark']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget4 = function _initMixedWidget4() {\n    var element = document.getElementById(\"kt_mixed_widget_4_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget5 = function _initMixedWidget5() {\n    var element = document.getElementById(\"kt_mixed_widget_5_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget6 = function _initMixedWidget6() {\n    var element = document.getElementById(\"kt_mixed_widget_6_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget13 = function _initMixedWidget13() {\n    var element = document.getElementById(\"kt_mixed_widget_13_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 25, 45, 30, 55, 55]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['info']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['info']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget14 = function _initMixedWidget14() {\n    var element = document.getElementById(\"kt_mixed_widget_14_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [74],\n      chart: {\n        height: height,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            margin: 0,\n            size: \"65%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: false,\n              fontWeight: '700'\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: '700',\n              offsetY: 12,\n              show: true,\n              formatter: function formatter(val) {\n                return val + '%';\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['success'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget15 = function _initMixedWidget15() {\n    var element = document.getElementById(\"kt_mixed_widget_15_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 60, 25, 25, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'gradient',\n        opacity: 1,\n        gradient: {\n          type: \"vertical\",\n          shadeIntensity: 0.5,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 0.375,\n          stops: [25, 50, 100],\n          colorStops: []\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['danger']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 65,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['danger']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget16 = function _initMixedWidget16() {\n    var element = document.getElementById(\"kt_mixed_widget_16_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [60, 50, 75, 80],\n      chart: {\n        height: height,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            margin: 0,\n            size: \"30%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: false,\n              fontWeight: \"700\"\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"18px\",\n              fontWeight: \"700\",\n              offsetY: 10,\n              show: true\n            },\n            total: {\n              show: true,\n              label: 'Total',\n              fontWeight: \"bold\",\n              formatter: function formatter(w) {\n                // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n                return '60%';\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['gray']['gray-100'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['danger'], KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget17 = function _initMixedWidget17() {\n    var element = document.getElementById(\"kt_mixed_widget_17_chart\");\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'warning';\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 25, 45, 30, 55, 55]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget18 = function _initMixedWidget18() {\n    var element = document.getElementById(\"kt_mixed_widget_18_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [74],\n      chart: {\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-500']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['primary'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  // Tiles\n  var _initTilesWidget1 = function _initTilesWidget1() {\n    var element = document.getElementById(\"kt_tiles_widget_1_chart\");\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 22, 30, 28, 25, 26, 30, 28, 22, 24, 25, 35]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'gradient',\n        opacity: 1,\n        gradient: {\n          type: \"vertical\",\n          shadeIntensity: 0.55,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 0.2,\n          stops: [25, 50, 100],\n          colorStops: []\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 37,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      },\n      padding: {\n        top: 0,\n        bottom: 0\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initTilesWidget2 = function _initTilesWidget2() {\n    var element = document.getElementById(\"kt_tiles_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var strokeColor = KTUtil.changeColor(KTApp.getSettings()['colors']['theme']['base']['danger']);\n    var fillColor = KTUtil.changeColor(KTApp.getSettings()['colors']['theme']['base']['danger']);\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 10, 20, 20, 12, 12]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          top: 0,\n          bottom: 0\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 22,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        }\n      },\n      colors: [fillColor],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initTilesWidget5 = function _initTilesWidget5() {\n    var element = document.getElementById(\"kt_tiles_widget_5_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 15, 18, 14]\n      }, {\n        name: 'Revenue',\n        data: [8, 13, 16, 12]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['25%'],\n          endingShape: 'rounded'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: ['solid', 'gradient'],\n        opacity: 0.25\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May']\n      },\n      yaxis: {\n        min: 0,\n        max: 20\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff']\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initTilesWidget8 = function _initTilesWidget8() {\n    var element = document.getElementById(\"kt_tiles_widget_8_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'danger';\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 20, 30, 15, 40, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid'\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 45,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      },\n      padding: {\n        top: 0,\n        bottom: 0\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initTilesWidget17 = function _initTilesWidget17() {\n    var element = document.getElementById(\"kt_tiles_widget_17_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 20, 20, 8]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          top: 0,\n          bottom: 0\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['success']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 22,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initTilesWidget20 = function _initTilesWidget20() {\n    var element = document.getElementById(\"kt_tiles_widget_20_chart\");\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [74],\n      chart: {\n        height: 250,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"400\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-300']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['theme']['inverse']['primary'],\n              fontSize: \"22px\",\n              fontWeight: \"bold\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTUtil.changeColor(KTApp.getSettings()['colors']['theme']['base']['primary'], -7),\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['inverse']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget21 = function _initMixedWidget21() {\n    var element = document.getElementById(\"kt_tiles_widget_21_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'info';\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 20, 30, 15, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 32,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var _initMixedWidget23 = function _initMixedWidget23() {\n    var element = document.getElementById(\"kt_tiles_widget_23_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [15, 25, 15, 40, 20, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: 125,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan, 2020', 'Feb, 2020', 'Mar, 2020', 'Apr, 2020', 'May, 2020', 'Jun, 2020'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  // Forms\n  var _initFormsWidget1 = function _initFormsWidget1() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_1_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget2 = function _initFormsWidget2() {\n    var formEl = KTUtil.getById(\"kt_forms_widget_2_form\");\n    var editorId = 'kt_forms_widget_2_editor';\n\n    // init editor\n    var options = {\n      modules: {\n        toolbar: {\n          container: \"#kt_forms_widget_2_editor_toolbar\"\n        }\n      },\n      placeholder: 'Type message...',\n      theme: 'snow'\n    };\n    if (!formEl) {\n      return;\n    }\n\n    // Init editor\n    var editorObj = new Quill('#' + editorId, options);\n  };\n  var _initFormsWidget3 = function _initFormsWidget3() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_3_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget4 = function _initFormsWidget4() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_4_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget5 = function _initFormsWidget5() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_5_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget6 = function _initFormsWidget6() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_6_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget7 = function _initFormsWidget7() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_7_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget8 = function _initFormsWidget8() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_8_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget9 = function _initFormsWidget9() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_9_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget10 = function _initFormsWidget10() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_10_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget11 = function _initFormsWidget11() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_11_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n  var _initFormsWidget12 = function _initFormsWidget12() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_12_input\");\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  // Advance Tables\n  var _initAdvancedTableGroupSelection = function _initAdvancedTableGroupSelection(element) {\n    var table = KTUtil.getById(element);\n    if (!table) {\n      return;\n    }\n    KTUtil.on(table, 'thead th .checkbox > input', 'change', function (e) {\n      var checkboxes = KTUtil.findAll(table, 'tbody td .checkbox > input');\n      for (var i = 0, len = checkboxes.length; i < len; i++) {\n        checkboxes[i].checked = this.checked;\n      }\n    });\n  };\n  var _initPriceSlider = function _initPriceSlider(element) {\n    // init slider\n    var slider = document.getElementById(element);\n    if (typeof slider === 'undefined') {\n      return;\n    }\n    if (!slider) {\n      return;\n    }\n    noUiSlider.create(slider, {\n      start: [20, 60],\n      connect: true,\n      range: {\n        'min': 0,\n        'max': 100\n      }\n    });\n  };\n\n  // Education Show More Demo\n  var _initEducationShowMoreBtn = function _initEducationShowMoreBtn() {\n    var el = KTUtil.getById('kt_app_education_more_feeds_btn');\n    if (!el) {\n      return;\n    }\n    KTUtil.addEvent(el, 'click', function (e) {\n      var elements = document.getElementsByClassName('education-more-feeds');\n      if (!elements || elements.length <= 0) {\n        return;\n      }\n      KTUtil.btnWait(el, 'spinner spinner-right spinner-white pr-15', 'Please wait...', true);\n      setTimeout(function () {\n        KTUtil.btnRelease(el);\n        KTUtil.addClass(el, 'd-none');\n        var item;\n        for (var i = 0, len = elements.length; i < len; i++) {\n          item = elements[0];\n          KTUtil.removeClass(elements[i], 'd-none');\n          var textarea = KTUtil.find(item, 'textarea');\n          if (textarea) {\n            autosize(textarea);\n          }\n        }\n        KTUtil.scrollTo(item);\n      }, 1000);\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      // General Controls\n      _initDaterangepicker();\n\n      // Stats Widgets\n      _initStatsWidget7();\n      _initStatsWidget8();\n      _initStatsWidget9();\n      _initStatsWidget10();\n      _initStatsWidget11();\n      _initStatsWidget12();\n\n      // Charts Widgets\n      _initChartsWidget1();\n      _initChartsWidget2();\n      _initChartsWidget3();\n      _initChartsWidget4();\n      _initChartsWidget5();\n      _initChartsWidget6();\n      _initChartsWidget7();\n      _initChartsWidget8();\n      _initChartsWidget9();\n\n      // Mixed Widgets\n      _initMixedWidget1();\n      _initMixedWidget2();\n      _initMixedWidget3();\n      _initMixedWidget4();\n      _initMixedWidget5();\n      _initMixedWidget6();\n      _initMixedWidget13();\n      _initMixedWidget14();\n      _initMixedWidget15();\n      _initMixedWidget16();\n      _initMixedWidget17();\n      _initMixedWidget18();\n\n      // Tiles Widgets\n      _initTilesWidget1();\n      _initTilesWidget2();\n      _initTilesWidget5();\n      _initTilesWidget8();\n      _initTilesWidget17();\n      _initTilesWidget20();\n      _initMixedWidget21();\n      _initMixedWidget23();\n\n      // Table Widgets\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_1');\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_2');\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_3');\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_4');\n\n      // Form Widgets\n      _initPriceSlider('kt_price_slider');\n\n      // Forms widgets\n      _initFormsWidget1();\n      _initFormsWidget2();\n      _initFormsWidget3();\n      _initFormsWidget4();\n      _initFormsWidget5();\n      _initFormsWidget6();\n      _initFormsWidget7();\n      _initFormsWidget8();\n      _initFormsWidget9();\n      _initFormsWidget10();\n      _initFormsWidget11();\n\n      // Education App\n      _initEducationShowMoreBtn();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTWidgets;\n}\njQuery(document).ready(function () {\n  KTWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/widgets.js\n");

            /***/
        })

        /******/
    });
    /************************************************************************/
    /******/ // The module cache
    /******/
    var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/
        if (cachedModule !== undefined) {
            /******/
            return cachedModule.exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module is referenced by other modules so it can't be inlined
    /******/
    var __webpack_exports__ = __webpack_require__("./resources/metronic/js/pages/widgets.js");
    /******/
    /******/
})();