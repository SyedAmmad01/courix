/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/custom/wizard/wizard-2.js":
/*!***************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/wizard/wizard-2.js ***!
  \***************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTWizard2 = function () {\n  // Base elements\n  var _wizardEl;\n  var _formEl;\n  var _wizardObj;\n  var _validations = [];\n\n  // Private functions\n  var _initWizard = function _initWizard() {\n    // Initialize form wizard\n    _wizardObj = new KTWizard(_wizardEl, {\n      startStep: 1,\n      // initial active step number\n      clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\n    });\n\n    // Validation before going to next page\n    _wizardObj.on('change', function (wizard) {\n      if (wizard.getStep() > wizard.getNewStep()) {\n        return; // Skip if stepped back\n      }\n\n      // Validate form before change wizard step\n      var validator = _validations[wizard.getStep() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          if (status == 'Valid') {\n            wizard.goTo(wizard.getNewStep());\n            KTUtil.scrollTop();\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn font-weight-bold btn-light\"\n              }\n            }).then(function () {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      }\n      return false; // Do not change wizard step, further action will be handled by he validator\n    });\n\n    // Change event\n    _wizardObj.on('changed', function (wizard) {\n      KTUtil.scrollTop();\n    });\n\n    // Submit event\n    _wizardObj.on('submit', function (wizard) {\n      Swal.fire({\n        text: \"All is good! Please confirm the form submission.\",\n        icon: \"success\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, submit!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-primary\",\n          cancelButton: \"btn font-weight-bold btn-default\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          _formEl.submit(); // Submit form\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been submitted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n  var _initValidation = function _initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n    _validations.push(FormValidation.formValidation(_formEl, {\n      fields: {\n        fname: {\n          validators: {\n            notEmpty: {\n              message: 'First name is required'\n            }\n          }\n        },\n        lname: {\n          validators: {\n            notEmpty: {\n              message: 'Last Name is required'\n            }\n          }\n        },\n        phone: {\n          validators: {\n            notEmpty: {\n              message: 'Phone is required'\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 2\n    _validations.push(FormValidation.formValidation(_formEl, {\n      fields: {\n        address1: {\n          validators: {\n            notEmpty: {\n              message: 'Address is required'\n            }\n          }\n        },\n        postcode: {\n          validators: {\n            notEmpty: {\n              message: 'Postcode is required'\n            }\n          }\n        },\n        city: {\n          validators: {\n            notEmpty: {\n              message: 'City is required'\n            }\n          }\n        },\n        state: {\n          validators: {\n            notEmpty: {\n              message: 'State is required'\n            }\n          }\n        },\n        country: {\n          validators: {\n            notEmpty: {\n              message: 'Country is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 3\n    _validations.push(FormValidation.formValidation(_formEl, {\n      fields: {\n        delivery: {\n          validators: {\n            notEmpty: {\n              message: 'Delivery type is required'\n            }\n          }\n        },\n        packaging: {\n          validators: {\n            notEmpty: {\n              message: 'Packaging type is required'\n            }\n          }\n        },\n        preferreddelivery: {\n          validators: {\n            notEmpty: {\n              message: 'Preferred delivery window is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 4\n    _validations.push(FormValidation.formValidation(_formEl, {\n      fields: {\n        locaddress1: {\n          validators: {\n            notEmpty: {\n              message: 'Address is required'\n            }\n          }\n        },\n        locpostcode: {\n          validators: {\n            notEmpty: {\n              message: 'Postcode is required'\n            }\n          }\n        },\n        loccity: {\n          validators: {\n            notEmpty: {\n              message: 'City is required'\n            }\n          }\n        },\n        locstate: {\n          validators: {\n            notEmpty: {\n              message: 'State is required'\n            }\n          }\n        },\n        loccountry: {\n          validators: {\n            notEmpty: {\n              message: 'Country is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 5\n    _validations.push(FormValidation.formValidation(_formEl, {\n      fields: {\n        ccname: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card name is required'\n            }\n          }\n        },\n        ccnumber: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card number is required'\n            },\n            creditCard: {\n              message: 'The credit card number is not valid'\n            }\n          }\n        },\n        ccmonth: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card month is required'\n            }\n          }\n        },\n        ccyear: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card year is required'\n            }\n          }\n        },\n        cccvv: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card CVV is required'\n            },\n            digits: {\n              message: 'The CVV value is not valid. Only numbers is allowed'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n  };\n  return {\n    // public functions\n    init: function init() {\n      _wizardEl = KTUtil.getById('kt_wizard');\n      _formEl = KTUtil.getById('kt_form');\n      _initWizard();\n      _initValidation();\n    }\n  };\n}();\njQuery(document).ready(function () {\n  KTWizard2.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/wizard/wizard-2.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/custom/wizard/wizard-2.js"]();
/******/ 	
/******/ })()
;