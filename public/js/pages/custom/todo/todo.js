/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/custom/todo/todo.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/pages/custom/todo/todo.js ***!
  \*********************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTAppTodo = function () {\n  // Private properties\n  var _asideEl;\n  var _listEl;\n  var _viewEl;\n  var _replyEl;\n  var _asideOffcanvas;\n\n  // Private methods\n  var _initEditor = function _initEditor(form, editor) {\n    // init editor\n    var options = {\n      modules: {\n        toolbar: {}\n      },\n      placeholder: 'Type message...',\n      theme: 'snow'\n    };\n    if (!KTUtil.getById(editor)) {\n      return;\n    }\n\n    // Init editor\n    var editor = new Quill('#' + editor, options);\n\n    // Customize editor\n    var toolbar = KTUtil.find(form, '.ql-toolbar');\n    var editor = KTUtil.find(form, '.ql-editor');\n    if (toolbar) {\n      KTUtil.addClass(toolbar, 'px-5 border-top-0 border-left-0 border-right-0');\n    }\n    if (editor) {\n      KTUtil.addClass(editor, 'px-8');\n    }\n  };\n  var _initAttachments = function _initAttachments(elemId) {\n    if (!KTUtil.getById(elemId)) {\n      return;\n    }\n    var id = \"#\" + elemId;\n    var previewNode = $(id + \" .dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parent('.dropzone-items').html();\n    previewNode.remove();\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      parallelUploads: 20,\n      maxFilesize: 1,\n      // Max filesize in MB\n      previewTemplate: previewTemplate,\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \"_select\" // Define the element that should be used as click trigger to select files.\n    });\n\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hookup the start button\n      $(document).find(id + ' .dropzone-item').css('display', '');\n    });\n\n    // Update the total progress bar\n    myDropzone.on(\"totaluploadprogress\", function (progress) {\n      document.querySelector(id + \" .progress-bar\").style.width = progress + \"%\";\n    });\n    myDropzone.on(\"sending\", function (file) {\n      // Show the total progress bar when upload starts\n      document.querySelector(id + \" .progress-bar\").style.opacity = \"1\";\n    });\n\n    // Hide the total progress bar when nothing's uploading anymore\n    myDropzone.on(\"complete\", function (progress) {\n      var thisProgressBar = id + \" .dz-complete\";\n      setTimeout(function () {\n        $(thisProgressBar + \" .progress-bar, \" + thisProgressBar + \" .progress\").css('opacity', '0');\n      }, 300);\n    });\n  };\n\n  // Public methods\n  return {\n    // Public functions\n    init: function init() {\n      // Init variables\n      _asideEl = KTUtil.getById('kt_todo_aside');\n      _listEl = KTUtil.getById('kt_todo_list');\n      _viewEl = KTUtil.getById('kt_todo_view');\n      _replyEl = KTUtil.getById('kt_todo_reply');\n\n      // Init handlers\n      KTAppTodo.initAside();\n      KTAppTodo.initList();\n      KTAppTodo.initView();\n      KTAppTodo.initReply();\n    },\n    initAside: function initAside() {\n      // Mobile offcanvas for mobile mode\n      _asideOffcanvas = new KTOffcanvas(_asideEl, {\n        overlay: true,\n        baseClass: 'offcanvas-mobile',\n        //closeBy: 'kt_todo_aside_close',\n        toggleBy: 'kt_subheader_mobile_toggle'\n      });\n\n      // View list\n      KTUtil.on(_asideEl, '.list-item[data-action=\"list\"]', 'click', function (e) {\n        var type = KTUtil.attr(this, 'data-type');\n        var listItemsEl = KTUtil.find(_listEl, '.kt-inbox__items');\n        var navItemEl = this.closest('.kt-nav__item');\n        var navItemActiveEl = KTUtil.find(_asideEl, '.kt-nav__item.kt-nav__item--active');\n\n        // demo loading\n        var loading = new KTDialog({\n          'type': 'loader',\n          'placement': 'top center',\n          'message': 'Loading ...'\n        });\n        loading.show();\n        setTimeout(function () {\n          loading.hide();\n          KTUtil.css(_listEl, 'display', 'flex'); // show list\n          KTUtil.css(_viewEl, 'display', 'none'); // hide view\n\n          KTUtil.addClass(navItemEl, 'kt-nav__item--active');\n          KTUtil.removeClass(navItemActiveEl, 'kt-nav__item--active');\n          KTUtil.attr(listItemsEl, 'data-type', type);\n        }, 600);\n      });\n    },\n    initList: function initList() {\n      // Group selection\n      KTUtil.on(_listEl, '[data-inbox=\"group-select\"] input', 'click', function () {\n        var messages = KTUtil.findAll(_listEl, '[data-inbox=\"message\"]');\n        for (var i = 0, j = messages.length; i < j; i++) {\n          var message = messages[i];\n          var checkbox = KTUtil.find(message, '.checkbox input');\n          checkbox.checked = this.checked;\n          if (this.checked) {\n            KTUtil.addClass(message, 'active');\n          } else {\n            KTUtil.removeClass(message, 'active');\n          }\n        }\n      });\n\n      // Individual selection\n      KTUtil.on(_listEl, '[data-inbox=\"message\"] [data-inbox=\"actions\"] .checkbox input', 'click', function () {\n        var item = this.closest('[data-inbox=\"message\"]');\n        if (item && this.checked) {\n          KTUtil.addClass(item, 'active');\n        } else {\n          KTUtil.removeClass(item, 'active');\n        }\n      });\n    },\n    initView: function initView() {\n      // Back to listing\n      KTUtil.on(_viewEl, '[data-inbox=\"back\"]', 'click', function () {\n        // demo loading\n        var loading = new KTDialog({\n          'type': 'loader',\n          'placement': 'top center',\n          'message': 'Loading ...'\n        });\n        loading.show();\n        setTimeout(function () {\n          loading.hide();\n          KTUtil.addClass(_listEl, 'd-block');\n          KTUtil.removeClass(_listEl, 'd-none');\n          KTUtil.addClass(_viewEl, 'd-none');\n          KTUtil.removeClass(_viewEl, 'd-block');\n        }, 700);\n      });\n\n      // Expand/Collapse reply\n      KTUtil.on(_viewEl, '[data-inbox=\"message\"]', 'click', function (e) {\n        var message = this.closest('[data-inbox=\"message\"]');\n        var dropdownToggleEl = KTUtil.find(this, '[data-toggle=\"dropdown\"]');\n        var toolbarEl = KTUtil.find(this, '[data-inbox=\"toolbar\"]');\n\n        // skip dropdown toggle click\n        if (e.target === dropdownToggleEl || dropdownToggleEl && dropdownToggleEl.contains(e.target) === true) {\n          return false;\n        }\n\n        // skip group actions click\n        if (e.target === toolbarEl || toolbarEl && toolbarEl.contains(e.target) === true) {\n          return false;\n        }\n        if (KTUtil.hasClass(message, 'toggle-on')) {\n          KTUtil.addClass(message, 'toggle-off');\n          KTUtil.removeClass(message, 'toggle-on');\n        } else {\n          KTUtil.removeClass(message, 'toggle-off');\n          KTUtil.addClass(message, 'toggle-on');\n        }\n      });\n    },\n    initReply: function initReply() {\n      _initEditor(_replyEl, 'kt_todo_reply_editor');\n      _initAttachments('kt_todo_reply_attachments');\n    }\n  };\n}();\n\n// Class Initialization\njQuery(document).ready(function () {\n  KTAppTodo.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL3RvZG8vdG9kby5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLElBQUlBLFNBQVMsR0FBRyxZQUFXO0VBQ3ZCO0VBQ0EsSUFBSUMsUUFBUTtFQUNaLElBQUlDLE9BQU87RUFDWCxJQUFJQyxPQUFPO0VBQ1gsSUFBSUMsUUFBUTtFQUNaLElBQUlDLGVBQWU7O0VBRW5CO0VBQ0EsSUFBSUMsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQVlDLElBQUksRUFBRUMsTUFBTSxFQUFFO0lBQ3JDO0lBQ0EsSUFBSUMsT0FBTyxHQUFHO01BQ1ZDLE9BQU8sRUFBRTtRQUNMQyxPQUFPLEVBQUUsQ0FBQztNQUNkLENBQUM7TUFDREMsV0FBVyxFQUFFLGlCQUFpQjtNQUM5QkMsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUVELElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUNQLE1BQU0sQ0FBQyxFQUFFO01BQ3pCO0lBQ0o7O0lBRUE7SUFDQSxJQUFJQSxNQUFNLEdBQUcsSUFBSVEsS0FBSyxDQUFDLEdBQUcsR0FBR1IsTUFBTSxFQUFFQyxPQUFPLENBQUM7O0lBRTdDO0lBQ0EsSUFBSUUsT0FBTyxHQUFHRyxNQUFNLENBQUNHLElBQUksQ0FBQ1YsSUFBSSxFQUFFLGFBQWEsQ0FBQztJQUM5QyxJQUFJQyxNQUFNLEdBQUdNLE1BQU0sQ0FBQ0csSUFBSSxDQUFDVixJQUFJLEVBQUUsWUFBWSxDQUFDO0lBRTVDLElBQUlJLE9BQU8sRUFBRTtNQUNURyxNQUFNLENBQUNJLFFBQVEsQ0FBQ1AsT0FBTyxFQUFFLGdEQUFnRCxDQUFDO0lBQzlFO0lBRUEsSUFBSUgsTUFBTSxFQUFFO01BQ1JNLE1BQU0sQ0FBQ0ksUUFBUSxDQUFDVixNQUFNLEVBQUUsTUFBTSxDQUFDO0lBQ25DO0VBQ0osQ0FBQztFQUVELElBQUlXLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQVlDLE1BQU0sRUFBRTtJQUNwQyxJ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QUFTLENBQUM4QyxJQUFJLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL3RvZG8vdG9kby5qcz81YTBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RBcHBUb2RvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfYXNpZGVFbDtcclxuICAgIHZhciBfbGlzdEVsO1xyXG4gICAgdmFyIF92aWV3RWw7XHJcbiAgICB2YXIgX3JlcGx5RWw7XHJcbiAgICB2YXIgX2FzaWRlT2ZmY2FudmFzO1xyXG5cclxuICAgIC8vIFByaXZhdGUgbWV0aG9kc1xyXG4gICAgdmFyIF9pbml0RWRpdG9yID0gZnVuY3Rpb24oZm9ybSwgZWRpdG9yKSB7XHJcbiAgICAgICAgLy8gaW5pdCBlZGl0b3JcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbW9kdWxlczoge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge31cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdUeXBlIG1lc3NhZ2UuLi4nLFxyXG4gICAgICAgICAgICB0aGVtZTogJ3Nub3cnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKCFLVFV0aWwuZ2V0QnlJZChlZGl0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXQgZWRpdG9yXHJcbiAgICAgICAgdmFyIGVkaXRvciA9IG5ldyBRdWlsbCgnIycgKyBlZGl0b3IsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyBDdXN0b21pemUgZWRpdG9yXHJcbiAgICAgICAgdmFyIHRvb2xiYXIgPSBLVFV0aWwuZmluZChmb3JtLCAnLnFsLXRvb2xiYXInKTtcclxuICAgICAgICB2YXIgZWRpdG9yID0gS1RVdGlsLmZpbmQoZm9ybSwgJy5xbC1lZGl0b3InKTtcclxuXHJcbiAgICAgICAgaWYgKHRvb2xiYXIpIHtcclxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHRvb2xiYXIsICdweC01IGJvcmRlci10b3AtMCBib3JkZXItbGVmdC0wIGJvcmRlci1yaWdodC0wJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlZGl0b3IsICdweC04Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdEF0dGFjaG1lbnRzID0gZnVuY3Rpb24oZWxlbUlkKSB7XHJcbiAgICAgICAgaWYgKCFLVFV0aWwuZ2V0QnlJZChlbGVtSWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpZCA9IFwiI1wiICsgZWxlbUlkO1xyXG4gICAgICAgIHZhciBwcmV2aWV3Tm9kZSA9ICQoaWQgKyBcIiAuZHJvcHpvbmUtaXRlbVwiKTtcclxuICAgICAgICBwcmV2aWV3Tm9kZS5pZCA9IFwiXCI7XHJcbiAgICAgICAgdmFyIHByZXZpZXdUZW1wbGF0ZSA9IHByZXZpZXdOb2RlLnBhcmVudCgnLmRyb3B6b25lLWl0ZW1zJykuaHRtbCgpO1xyXG4gICAgICAgIHByZXZpZXdOb2RlLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICB2YXIgbXlEcm9wem9uZSA9IG5ldyBEcm9wem9uZShpZCwgeyAvLyBNYWtlIHRoZSB3aG9sZSBib2R5IGEgZHJvcHpvbmVcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8va2VlbnRoZW1lcy5jb20vc2NyaXB0cy92b2lkLnBocFwiLCAvLyBTZXQgdGhlIHVybCBmb3IgeW91ciB1cGxvYWQgc2NyaXB0IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIHBhcmFsbGVsVXBsb2FkczogMjAsXHJcbiAgICAgICAgICAgIG1heEZpbGVzaXplOiAxLCAvLyBNYXggZmlsZXNpemUgaW4gTUJcclxuICAgICAgICAgICAgcHJldmlld1RlbXBsYXRlOiBwcmV2aWV3VGVtcGxhdGUsXHJcbiAgICAgICAgICAgIHByZXZpZXdzQ29udGFpbmVyOiBpZCArIFwiIC5kcm9wem9uZS1pdGVtc1wiLCAvLyBEZWZpbmUgdGhlIGNvbnRhaW5lciB0byBkaXNwbGF5IHRoZSBwcmV2aWV3c1xyXG4gICAgICAgICAgICBjbGlja2FibGU6IGlkICsgXCJfc2VsZWN0XCIgLy8gRGVmaW5lIHRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgY2xpY2sgdHJpZ2dlciB0byBzZWxlY3QgZmlsZXMuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJhZGRlZGZpbGVcIiwgZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgICAgICAvLyBIb29rdXAgdGhlIHN0YXJ0IGJ1dHRvblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKGlkICsgJyAuZHJvcHpvbmUtaXRlbScpLmNzcygnZGlzcGxheScsICcnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHRoZSB0b3RhbCBwcm9ncmVzcyBiYXJcclxuICAgICAgICBteURyb3B6b25lLm9uKFwidG90YWx1cGxvYWRwcm9ncmVzc1wiLCBmdW5jdGlvbihwcm9ncmVzcykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlkICsgXCIgLnByb2dyZXNzLWJhclwiKS5zdHlsZS53aWR0aCA9IHByb2dyZXNzICsgXCIlXCI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJzZW5kaW5nXCIsIGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgdG90YWwgcHJvZ3Jlc3MgYmFyIHdoZW4gdXBsb2FkIHN0YXJ0c1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlkICsgXCIgLnByb2dyZXNzLWJhclwiKS5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhpZGUgdGhlIHRvdGFsIHByb2dyZXNzIGJhciB3aGVuIG5vdGhpbmcncyB1cGxvYWRpbmcgYW55bW9yZVxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJjb21wbGV0ZVwiLCBmdW5jdGlvbihwcm9ncmVzcykge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1Byb2dyZXNzQmFyID0gaWQgKyBcIiAuZHotY29tcGxldGVcIjtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQodGhpc1Byb2dyZXNzQmFyICsgXCIgLnByb2dyZXNzLWJhciwgXCIgKyB0aGlzUHJvZ3Jlc3NCYXIgKyBcIiAucHJvZ3Jlc3NcIikuY3NzKCdvcGFjaXR5JywgJzAnKTtcclxuICAgICAgICAgICAgfSwgMzAwKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIFB1YmxpYyBmdW5jdGlvbnNcclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gSW5pdCB2YXJpYWJsZXNcclxuICAgICAgICAgICAgX2FzaWRlRWwgPSBLVFV0aWwuZ2V0QnlJZCgna3RfdG9kb19hc2lkZScpO1xyXG4gICAgICAgICAgICBfbGlzdEVsID0gS1RVdGlsLmdldEJ5SWQoJ2t0X3RvZG9fbGlzdCcpO1xyXG4gICAgICAgICAgICBfdmlld0VsID0gS1RVdGlsLmdldEJ5SWQoJ2t0X3RvZG9fdmlldycpO1xyXG4gICAgICAgICAgICBfcmVwbHlFbCA9IEtUVXRpbC5nZXRCeUlkKCdrdF90b2RvX3JlcGx5Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIEtUQXBwVG9kby5pbml0QXNpZGUoKTtcclxuICAgICAgICAgICAgS1RBcHBUb2RvLmluaXRMaXN0KCk7XHJcbiAgICAgICAgICAgIEtUQXBwVG9kby5pbml0VmlldygpO1xyXG4gICAgICAgICAgICBLVEFwcFRvZG8uaW5pdFJlcGx5KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdEFzaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gTW9iaWxlIG9mZmNhbnZhcyBmb3IgbW9iaWxlIG1vZGVcclxuICAgICAgICAgICAgX2FzaWRlT2ZmY2FudmFzID0gbmV3IEtUT2ZmY2FudmFzKF9hc2lkZUVsLCB7XHJcbiAgICAgICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzLW1vYmlsZScsXHJcbiAgICAgICAgICAgICAgICAvL2Nsb3NlQnk6ICdrdF90b2RvX2FzaWRlX2Nsb3NlJyxcclxuICAgICAgICAgICAgICAgIHRvZ2dsZUJ5OiAna3Rfc3ViaGVhZGVyX21vYmlsZV90b2dnbGUnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVmlldyBsaXN0XHJcbiAgICAgICAgICAgIEtUVXRpbC5vbihfYXNpZGVFbCwgJy5saXN0LWl0ZW1bZGF0YS1hY3Rpb249XCJsaXN0XCJdJywgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBLVFV0aWwuYXR0cih0aGlzLCAnZGF0YS10eXBlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdEl0ZW1zRWwgPSBLVFV0aWwuZmluZChfbGlzdEVsLCAnLmt0LWluYm94X19pdGVtcycpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hdkl0ZW1FbCA9IHRoaXMuY2xvc2VzdCgnLmt0LW5hdl9faXRlbScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hdkl0ZW1BY3RpdmVFbCA9IEtUVXRpbC5maW5kKF9hc2lkZUVsLCAnLmt0LW5hdl9faXRlbS5rdC1uYXZfX2l0ZW0tLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGRlbW8gbG9hZGluZ1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvYWRpbmcgPSBuZXcgS1REaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2xvYWRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3BsYWNlbWVudCc6ICd0b3AgY2VudGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdMb2FkaW5nIC4uLidcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbG9hZGluZy5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhfbGlzdEVsLCAnZGlzcGxheScsICdmbGV4Jyk7IC8vIHNob3cgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoX3ZpZXdFbCwgJ2Rpc3BsYXknLCAnbm9uZScpOyAvLyBoaWRlIHZpZXdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKG5hdkl0ZW1FbCwgJ2t0LW5hdl9faXRlbS0tYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKG5hdkl0ZW1BY3RpdmVFbCwgJ2t0LW5hdl9faXRlbS0tYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hdHRyKGxpc3RJdGVtc0VsLCAnZGF0YS10eXBlJywgdHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9LCA2MDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0TGlzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIEdyb3VwIHNlbGVjdGlvblxyXG4gICAgICAgICAgICBLVFV0aWwub24oX2xpc3RFbCwgJ1tkYXRhLWluYm94PVwiZ3JvdXAtc2VsZWN0XCJdIGlucHV0JywgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZXMgPSBLVFV0aWwuZmluZEFsbChfbGlzdEVsLCAnW2RhdGEtaW5ib3g9XCJtZXNzYWdlXCJdJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBtZXNzYWdlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9IEtUVXRpbC5maW5kKG1lc3NhZ2UsICcuY2hlY2tib3ggaW5wdXQnKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdGhpcy5jaGVja2VkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhtZXNzYWdlLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKG1lc3NhZ2UsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gSW5kaXZpZHVhbCBzZWxlY3Rpb25cclxuICAgICAgICAgICAgS1RVdGlsLm9uKF9saXN0RWwsICdbZGF0YS1pbmJveD1cIm1lc3NhZ2VcIl0gW2RhdGEtaW5ib3g9XCJhY3Rpb25zXCJdIC5jaGVja2JveCBpbnB1dCcsICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmNsb3Nlc3QoJ1tkYXRhLWluYm94PVwibWVzc2FnZVwiXScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtICYmIHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhpdGVtLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhpdGVtLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRWaWV3OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gQmFjayB0byBsaXN0aW5nXHJcbiAgICAgICAgICAgIEtUVXRpbC5vbihfdmlld0VsLCAnW2RhdGEtaW5ib3g9XCJiYWNrXCJdJywgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZW1vIGxvYWRpbmdcclxuICAgICAgICAgICAgICAgIHZhciBsb2FkaW5nID0gbmV3IEtURGlhbG9nKHtcclxuICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdsb2FkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICdwbGFjZW1lbnQnOiAndG9wIGNlbnRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiAnTG9hZGluZyAuLi4nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsb2FkaW5nLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmcuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoX2xpc3RFbCwgJ2QtYmxvY2snKTtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoX2xpc3RFbCwgJ2Qtbm9uZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoX3ZpZXdFbCwgJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhfdmlld0VsLCAnZC1ibG9jaycpO1xyXG4gICAgICAgICAgICAgICAgfSwgNzAwKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBFeHBhbmQvQ29sbGFwc2UgcmVwbHlcclxuICAgICAgICAgICAgS1RVdGlsLm9uKF92aWV3RWwsICdbZGF0YS1pbmJveD1cIm1lc3NhZ2VcIl0nLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuY2xvc2VzdCgnW2RhdGEtaW5ib3g9XCJtZXNzYWdlXCJdJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlRWwgPSBLVFV0aWwuZmluZCh0aGlzLCAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nKTtcclxuICAgICAgICAgICAgICAgIHZhciB0b29sYmFyRWwgPSBLVFV0aWwuZmluZCh0aGlzLCAnW2RhdGEtaW5ib3g9XCJ0b29sYmFyXCJdJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBkcm9wZG93biB0b2dnbGUgY2xpY2tcclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZHJvcGRvd25Ub2dnbGVFbCB8fCAoZHJvcGRvd25Ub2dnbGVFbCAmJiBkcm9wZG93blRvZ2dsZUVsLmNvbnRhaW5zKGUudGFyZ2V0KSA9PT0gdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBncm91cCBhY3Rpb25zIGNsaWNrXHJcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRvb2xiYXJFbCB8fCAodG9vbGJhckVsICYmIHRvb2xiYXJFbC5jb250YWlucyhlLnRhcmdldCkgPT09IHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MobWVzc2FnZSwgJ3RvZ2dsZS1vbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKG1lc3NhZ2UsICd0b2dnbGUtb2ZmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKG1lc3NhZ2UsICd0b2dnbGUtb24nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKG1lc3NhZ2UsICd0b2dnbGUtb2ZmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKG1lc3NhZ2UsICd0b2dnbGUtb24nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdFJlcGx5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgX2luaXRFZGl0b3IoX3JlcGx5RWwsICdrdF90b2RvX3JlcGx5X2VkaXRvcicpO1xyXG4gICAgICAgICAgICBfaW5pdEF0dGFjaG1lbnRzKCdrdF90b2RvX3JlcGx5X2F0dGFjaG1lbnRzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gQ2xhc3MgSW5pdGlhbGl6YXRpb25cclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgIEtUQXBwVG9kby5pbml0KCk7XHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiS1RBcHBUb2RvIiwiX2FzaWRlRWwiLCJfbGlzdEVsIiwiX3ZpZXdFbCIsIl9yZXBseUVsIiwiX2FzaWRlT2ZmY2FudmFzIiwiX2luaXRFZGl0b3IiLCJmb3JtIiwiZWRpdG9yIiwib3B0aW9ucyIsIm1vZHVsZXMiLCJ0b29sYmFyIiwicGxhY2Vob2xkZXIiLCJ0aGVtZSIsIktUVXRpbCIsImdldEJ5SWQiLCJRdWlsbCIsImZpbmQiLCJhZGRDbGFzcyIsIl9pbml0QXR0YWNobWVudHMiLCJlbGVtSWQiLCJpZCIsInByZXZpZXdOb2RlIiwiJCIsInByZXZpZXdUZW1wbGF0ZSIsInBhcmVudCIsImh0bWwiLCJyZW1vdmUiLCJteURyb3B6b25lIiwiRHJvcHpvbmUiLCJ1cmwiLCJwYXJhbGxlbFVwbG9hZHMiLCJtYXhGaWxlc2l6ZSIsInByZXZpZXdzQ29udGFpbmVyIiwiY2xpY2thYmxlIiwib24iLCJmaWxlIiwiZG9jdW1lbnQiLCJjc3MiLCJwcm9ncmVzcyIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZSIsIndpZHRoIiwib3BhY2l0eSIsInRoaXNQcm9ncmVzc0JhciIsInNldFRpbWVvdXQiLCJpbml0IiwiaW5pdEFzaWRlIiwiaW5pdExpc3QiLCJpbml0VmlldyIsImluaXRSZXBseSIsIktUT2ZmY2FudmFzIiwib3ZlcmxheSIsImJhc2VDbGFzcyIsInRvZ2dsZUJ5IiwiZSIsInR5cGUiLCJhdHRyIiwibGlzdEl0ZW1zRWwiLCJuYXZJdGVtRWwiLCJjbG9zZXN0IiwibmF2SXRlbUFjdGl2ZUVsIiwibG9hZGluZyIsIktURGlhbG9nIiwic2hvdyIsImhpZGUiLCJyZW1vdmVDbGFzcyIsIm1lc3NhZ2VzIiwiZmluZEFsbCIsImkiLCJqIiwibGVuZ3RoIiwibWVzc2FnZSIsImNoZWNrYm94IiwiY2hlY2tlZCIsIml0ZW0iLCJkcm9wZG93blRvZ2dsZUVsIiwidG9vbGJhckVsIiwidGFyZ2V0IiwiY29udGFpbnMiLCJoYXNDbGFzcyIsImpRdWVyeSIsInJlYWR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/todo/todo.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/custom/todo/todo.js"]();
/******/ 	
/******/ })()
;