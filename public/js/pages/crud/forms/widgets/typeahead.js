/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/crud/forms/widgets/typeahead.js":
/*!*********************************************************************!*\
  !*** ./resources/metronic/js/pages/crud/forms/widgets/typeahead.js ***!
  \*********************************************************************/
/***/ (() => {

eval("// Class definition\nvar KTTypeahead = function () {\n  var states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];\n\n  // Private functions\n  var demo1 = function demo1() {\n    var substringMatcher = function substringMatcher(strs) {\n      return function findMatches(q, cb) {\n        var matches, substringRegex;\n\n        // an array that will be populated with substring matches\n        matches = [];\n\n        // regex used to determine if a string contains the substring `q`\n        substrRegex = new RegExp(q, 'i');\n\n        // iterate through the pool of strings and for any string that\n        // contains the substring `q`, add it to the `matches` array\n        $.each(strs, function (i, str) {\n          if (substrRegex.test(str)) {\n            matches.push(str);\n          }\n        });\n        cb(matches);\n      };\n    };\n    $('#kt_typeahead_1, #kt_typeahead_1_modal').typeahead({\n      hint: true,\n      highlight: true,\n      minLength: 1\n    }, {\n      name: 'states',\n      source: substringMatcher(states)\n    });\n  };\n  var demo2 = function demo2() {\n    // constructs the suggestion engine\n    var bloodhound = new Bloodhound({\n      datumTokenizer: Bloodhound.tokenizers.whitespace,\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      // `states` is an array of state names defined in \\\"The Basics\\\"\n      local: states\n    });\n    $('#kt_typeahead_2, #kt_typeahead_2_modal').typeahead({\n      hint: true,\n      highlight: true,\n      minLength: 1\n    }, {\n      name: 'states',\n      source: bloodhound\n    });\n  };\n  var demo3 = function demo3() {\n    var countries = new Bloodhound({\n      datumTokenizer: Bloodhound.tokenizers.whitespace,\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      // url points to a json file that contains an array of country names, see\n      // https://github.com/twitter/typeahead.js/blob/gh-pages/data/countries.json\n      prefetch: HOST_URL + '/api/?file=typeahead/countries.json'\n    });\n\n    // passing in `null` for the `options` arguments will result in the default\n    // options being used\n    $('#kt_typeahead_3, #kt_typeahead_3_modal').typeahead(null, {\n      name: 'countries',\n      source: countries\n    });\n  };\n  var demo4 = function demo4() {\n    var bestPictures = new Bloodhound({\n      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      prefetch: HOST_URL + '/api/?file=typeahead/movies.json'\n    });\n    $('#kt_typeahead_4').typeahead(null, {\n      name: 'best-pictures',\n      display: 'value',\n      source: bestPictures,\n      templates: {\n        empty: ['<div class=\\\"empty-message\\\" style=\\\"padding: 10px 15px; text-align: center;\\\">', 'unable to find any Best Picture winners that match the current query', '</div>'].join('\\n'),\n        suggestion: Handlebars.compile('<div><strong>{{value}}</strong> â€“ {{year}}</div>')\n      }\n    });\n  };\n  var demo5 = function demo5() {\n    var nbaTeams = new Bloodhound({\n      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('team'),\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      prefetch: HOST_URL + '/api/?file=typeahead/nba.json'\n    });\n    var nhlTeams = new Bloodhound({\n      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('team'),\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      prefetch: HOST_URL + '/api/?file=typeahead/nhl.json'\n    });\n    $('#kt_typeahead_5').typeahead({\n      highlight: true\n    }, {\n      name: 'nba-teams',\n      display: 'team',\n      source: nbaTeams,\n      templates: {\n        header: '<h3 class=\\\"league-name\\\" style=\\\"padding: 5px 15px; font-size: 1.2rem; margin:0;\\\">NBA Teams</h3>'\n      }\n    }, {\n      name: 'nhl-teams',\n      display: 'team',\n      source: nhlTeams,\n      templates: {\n        header: '<h3 class=\\\"league-name\\\" style=\\\"padding: 5px 15px; font-size: 1.2rem; margin:0;\\\">NHL Teams</h3>'\n      }\n    });\n  };\n  return {\n    // public functions\n    init: function init() {\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n      demo5();\n    }\n  };\n}();\njQuery(document).ready(function () {\n  KTTypeahead.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/crud/forms/widgets/typeahead.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/crud/forms/widgets/typeahead.js"]();
/******/ 	
/******/ })()
;